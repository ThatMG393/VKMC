plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories { }

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings() // "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    includeLWJGLDeps()
}

loom {
    accessWidenerPath = file('src/main/resources/vkmc.accesswidener')
    /* mixin {
        
    } */
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it }_${project.base.archivesName.get() }" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories { }
}

void includeLWJGLDeps() {
    String[] lwjglNatives = project.lwjgl_natives.split(',')
    String[] lwjglModules = project.lwjgl_modules.split(',')
    dependencies {
        lwjglModules.each { m ->
            include(implementation("org.lwjgl:lwjgl-${m}:${project.lwjgl_version}"))
            lwjglNatives.any { n ->
                if (m == 'vulkan' && (n != 'macos' || n != 'macos-arm64')) {
                    return
                }
                
                include(runtimeOnly("org.lwjgl:lwjgl-${m}:${project.lwjgl_version}:natives-${n}"))
            }
        }
    }
}
